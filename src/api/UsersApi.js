/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreateUserDto from '../model/CreateUserDto';
import GenerateDidDto from '../model/GenerateDidDto';
import RegistrationProcessDto from '../model/RegistrationProcessDto';
import UserResponseDto from '../model/UserResponseDto';
import UsersResponseDto from '../model/UsersResponseDto';

/**
* Users service.
* @module api/UsersApi
* @version 0.9.2
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the usersControllerCreate operation.
     * @callback moduleapi/UsersApi~usersControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ユーザーアカウント作成
     * 新規ユーザーアカウントを作成します。
     * @param {module:model/CreateUserDto} body 
     * @param {module:api/UsersApi~usersControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersControllerCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersControllerCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponseDto;

      return this.apiClient.callApi(
        '/api/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerExportKey operation.
     * @callback moduleapi/UsersApi~usersControllerExportKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * アカウントへの鍵のメール送信
     * クライアントアカウントに紐付いたDIDの鍵情報をメールで送信し、共有します。
     * @param {String} id 
     * @param {String} keyId 
     * @param {module:api/UsersApi~usersControllerExportKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerExportKey(id, keyId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerExportKey");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling usersControllerExportKey");
      }

      let pathParams = {
        'id': id,'keyId': keyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{id}/keys/{keyId}/mail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerFindAll operation.
     * @callback moduleapi/UsersApi~usersControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ユーザーアカウント一覧取得
     * ユーザーアカウントを一覧として値を返します。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {Number} opts.limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {String} opts.name (任意) 例: \&quot;Jhon Doe\&quot;
     * @param {String} opts.email (任意) 例: \&quot;client1@email.com\&quot;
     * @param {module:model/String} opts.status (任意) 例: \&quot;active\&quot;
     * @param {module:model/String} opts.role (任意) 例: \&quot;client\&quot;
     * @param {Boolean} opts.needActivateFlow (任意) 例: true, false
     * @param {module:api/UsersApi~usersControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersControllerFindAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit'],'name': opts['name'],'email': opts['email'],'status': opts['status'],'role': opts['role'],'needActivateFlow': opts['needActivateFlow']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersResponseDto;

      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerFindOne operation.
     * @callback moduleapi/UsersApi~usersControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ユーザーアカウント詳細取得
     * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
     * @param {String} id 
     * @param {module:api/UsersApi~usersControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersControllerFindOne(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponseDto;

      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerInvite operation.
     * @callback moduleapi/UsersApi~usersControllerInviteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ユーザーアカウントへのアカウント有効化メール送信
     * @param {String} id 
     * @param {module:api/UsersApi~usersControllerInviteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerInvite(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerInvite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{id}/invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerRegisterUserDid operation.
     * @callback moduleapi/UsersApi~usersControllerRegisterUserDidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the count of clients
     * @param {module:model/GenerateDidDto} body 
     * @param {String} id 
     * @param {module:api/UsersApi~usersControllerRegisterUserDidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerRegisterUserDid(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersControllerRegisterUserDid");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerRegisterUserDid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{id}/dids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerRegistration operation.
     * @callback moduleapi/UsersApi~usersControllerRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ユーザーアカウントへのアカウント有効化、登録フロー
     * @param {module:model/RegistrationProcessDto} body 
     * @param {String} token 
     * @param {module:api/UsersApi~usersControllerRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerRegistration(body, token, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersControllerRegistration");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersControllerRegistration");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/registration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerRemove operation.
     * @callback moduleapi/UsersApi~usersControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ユーザーアカウント停止
     * リクエストパラメータのidで指定された単一のユーザーアカウントを停止します。
     * @param {String} id 
     * @param {module:api/UsersApi~usersControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerRemove(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerSendDid operation.
     * @callback moduleapi/UsersApi~usersControllerSendDidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * アカウントへのDIDのメール送信
     * アカウントに紐付いたDIDをメールで送信し、共有します。
     * @param {String} id 
     * @param {String} didInfoId 
     * @param {module:api/UsersApi~usersControllerSendDidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerSendDid(id, didInfoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerSendDid");
      }
      // verify the required parameter 'didInfoId' is set
      if (didInfoId === undefined || didInfoId === null) {
        throw new Error("Missing the required parameter 'didInfoId' when calling usersControllerSendDid");
      }

      let pathParams = {
        'id': id,'didInfoId': didInfoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{id}/dids/{didInfoId}/mail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerSendKey operation.
     * @callback moduleapi/UsersApi~usersControllerSendKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * アカウントへのDIDのメール送信
     * アカウントに紐付いたDIDをメールで送信し、共有します。
     * @param {String} id 
     * @param {String} didInfoId 
     * @param {module:api/UsersApi~usersControllerSendKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerSendKey(id, didInfoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerSendKey");
      }
      // verify the required parameter 'didInfoId' is set
      if (didInfoId === undefined || didInfoId === null) {
        throw new Error("Missing the required parameter 'didInfoId' when calling usersControllerSendKey");
      }

      let pathParams = {
        'id': id,'didInfoId': didInfoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{id}/keys/{didInfoId}/mail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerSendVc operation.
     * @callback moduleapi/UsersApi~usersControllerSendVcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * アカウントへのVCのメール送信
     * アカウントに紐付いたVCをメールで送信し、共有します。
     * @param {String} id 
     * @param {String} vcInfoId 
     * @param {module:api/UsersApi~usersControllerSendVcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersControllerSendVc(id, vcInfoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerSendVc");
      }
      // verify the required parameter 'vcInfoId' is set
      if (vcInfoId === undefined || vcInfoId === null) {
        throw new Error("Missing the required parameter 'vcInfoId' when calling usersControllerSendVc");
      }

      let pathParams = {
        'id': id,'vcInfoId': vcInfoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{id}/vcs/{vcInfoId}/mail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersControllerUpdate operation.
     * @callback moduleapi/UsersApi~usersControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ユーザーアカウント更新
     * リクエストパラメータのidで指定された単一のユーザーアカウント情報を更新します。
     * @param {module:model/CreateUserDto} body 
     * @param {String} id 
     * @param {module:api/UsersApi~usersControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersControllerUpdate(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersControllerUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponseDto;

      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}