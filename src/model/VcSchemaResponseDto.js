/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Badge from './Badge';
import Group from './Group';
import VcContext from './VcContext';
import VcInfo from './VcInfo';
import VcSchemaProperty from './VcSchemaProperty';

/**
 * The VcSchemaResponseDto model module.
 * @module model/VcSchemaResponseDto
 * @version 0.9.2
 */
export default class VcSchemaResponseDto {
  /**
   * Constructs a new <code>VcSchemaResponseDto</code>.
   * @alias module:model/VcSchemaResponseDto
   * @class
   * @param id {String} VCスキーマの識別子
   * @param title {String} VCスキーマのタイトル
   * @param version {String} VCスキーマのバージョン
   * @param description {String} VCスキーマの説明文
   * @param isBadgeSchema {String} VCスキーマがバッジのスキーマか否か
   * @param vcInfos {Array.<module:model/VcInfo>} 
   * @param vcContexts {Array.<module:model/VcContext>} VCのスキーマのJSONスキーマコンテキスト
   * @param vcSchemaProperties {Array.<module:model/VcSchemaProperty>} VCのスキーマの各項目における項目名と項目型のオブジェクトの配列
   * @param groups {Array.<module:model/Group>} 
   * @param badges {Array.<module:model/Badge>} VCスキーマを紐付けたバッジ
   * @param file {Object} VCスキーマに紐付けるバッジ用の画像。`isBadgeSchema`プロパティが`true`の場合必須。
   * @param createdBy {Object} VCスキーマを作成したユーザーアカウント
   * @param createdAt {String} VCスキーマの作成日時
   * @param updatedAt {String} VCスキーマの最終更新日時
   */
  constructor(id, title, version, description, isBadgeSchema, vcInfos, vcContexts, vcSchemaProperties, groups, badges, file, createdBy, createdAt, updatedAt) {
    this.id = id;
    this.title = title;
    this.version = version;
    this.description = description;
    this.isBadgeSchema = isBadgeSchema;
    this.vcInfos = vcInfos;
    this.vcContexts = vcContexts;
    this.vcSchemaProperties = vcSchemaProperties;
    this.groups = groups;
    this.badges = badges;
    this.file = file;
    this.createdBy = createdBy;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructs a <code>VcSchemaResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VcSchemaResponseDto} obj Optional instance to populate.
   * @return {module:model/VcSchemaResponseDto} The populated <code>VcSchemaResponseDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new VcSchemaResponseDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('isBadgeSchema'))
        obj.isBadgeSchema = ApiClient.convertToType(data['isBadgeSchema'], 'String');
      if (data.hasOwnProperty('vcInfos'))
        obj.vcInfos = ApiClient.convertToType(data['vcInfos'], [VcInfo]);
      if (data.hasOwnProperty('vcContexts'))
        obj.vcContexts = ApiClient.convertToType(data['vcContexts'], [VcContext]);
      if (data.hasOwnProperty('vcSchemaProperties'))
        obj.vcSchemaProperties = ApiClient.convertToType(data['vcSchemaProperties'], [VcSchemaProperty]);
      if (data.hasOwnProperty('groups'))
        obj.groups = ApiClient.convertToType(data['groups'], [Group]);
      if (data.hasOwnProperty('badges'))
        obj.badges = ApiClient.convertToType(data['badges'], [Badge]);
      if (data.hasOwnProperty('file'))
        obj.file = ApiClient.convertToType(data['file'], Object);
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], Object);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }
}

/**
 * VCスキーマの識別子
 * @member {String} id
 */
VcSchemaResponseDto.prototype.id = undefined;

/**
 * VCスキーマのタイトル
 * @member {String} title
 */
VcSchemaResponseDto.prototype.title = undefined;

/**
 * VCスキーマのバージョン
 * @member {String} version
 */
VcSchemaResponseDto.prototype.version = undefined;

/**
 * VCスキーマの説明文
 * @member {String} description
 */
VcSchemaResponseDto.prototype.description = undefined;

/**
 * VCスキーマがバッジのスキーマか否か
 * @member {String} isBadgeSchema
 */
VcSchemaResponseDto.prototype.isBadgeSchema = undefined;

/**
 * @member {Array.<module:model/VcInfo>} vcInfos
 */
VcSchemaResponseDto.prototype.vcInfos = undefined;

/**
 * VCのスキーマのJSONスキーマコンテキスト
 * @member {Array.<module:model/VcContext>} vcContexts
 */
VcSchemaResponseDto.prototype.vcContexts = undefined;

/**
 * VCのスキーマの各項目における項目名と項目型のオブジェクトの配列
 * @member {Array.<module:model/VcSchemaProperty>} vcSchemaProperties
 */
VcSchemaResponseDto.prototype.vcSchemaProperties = undefined;

/**
 * @member {Array.<module:model/Group>} groups
 */
VcSchemaResponseDto.prototype.groups = undefined;

/**
 * VCスキーマを紐付けたバッジ
 * @member {Array.<module:model/Badge>} badges
 */
VcSchemaResponseDto.prototype.badges = undefined;

/**
 * VCスキーマに紐付けるバッジ用の画像。`isBadgeSchema`プロパティが`true`の場合必須。
 * @member {Object} file
 */
VcSchemaResponseDto.prototype.file = undefined;

/**
 * VCスキーマを作成したユーザーアカウント
 * @member {Object} createdBy
 */
VcSchemaResponseDto.prototype.createdBy = undefined;

/**
 * VCスキーマの作成日時
 * @member {String} createdAt
 */
VcSchemaResponseDto.prototype.createdAt = undefined;

/**
 * VCスキーマの最終更新日時
 * @member {String} updatedAt
 */
VcSchemaResponseDto.prototype.updatedAt = undefined;

