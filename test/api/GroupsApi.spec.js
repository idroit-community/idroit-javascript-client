/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IDroitDashboardAdminApi);
  }
}(this, function(expect, IDroitDashboardAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IDroitDashboardAdminApi.GroupsApi();
  });

  describe('(package)', function() {
    describe('GroupsApi', function() {
      describe('groupsControllerConnectDidInfos', function() {
        it('should call groupsControllerConnectDidInfos successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerConnectDidInfos call and complete the assertions
          /*

          instance.groupsControllerConnectDidInfos(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerConnectUsers', function() {
        it('should call groupsControllerConnectUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerConnectUsers call and complete the assertions
          /*

          instance.groupsControllerConnectUsers(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerConnectVcInfos', function() {
        it('should call groupsControllerConnectVcInfos successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerConnectVcInfos call and complete the assertions
          /*

          instance.groupsControllerConnectVcInfos(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerConnectVcSchema', function() {
        it('should call groupsControllerConnectVcSchema successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerConnectVcSchema call and complete the assertions
          /*

          instance.groupsControllerConnectVcSchema(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerConnectVpInfos', function() {
        it('should call groupsControllerConnectVpInfos successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerConnectVpInfos call and complete the assertions
          /*

          instance.groupsControllerConnectVpInfos(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerCreate', function() {
        it('should call groupsControllerCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerCreate call and complete the assertions
          /*

          instance.groupsControllerCreate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerDisconnectDidInfo', function() {
        it('should call groupsControllerDisconnectDidInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerDisconnectDidInfo call and complete the assertions
          /*

          instance.groupsControllerDisconnectDidInfo(id, didInfoId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerDisconnectUser', function() {
        it('should call groupsControllerDisconnectUser successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerDisconnectUser call and complete the assertions
          /*

          instance.groupsControllerDisconnectUser(id, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerDisconnectVcInfo', function() {
        it('should call groupsControllerDisconnectVcInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerDisconnectVcInfo call and complete the assertions
          /*

          instance.groupsControllerDisconnectVcInfo(id, vcInfoId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerDisconnectVcSchema', function() {
        it('should call groupsControllerDisconnectVcSchema successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerDisconnectVcSchema call and complete the assertions
          /*

          instance.groupsControllerDisconnectVcSchema(id, vcSchemaId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerDisconnectVpInfo', function() {
        it('should call groupsControllerDisconnectVpInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerDisconnectVpInfo call and complete the assertions
          /*

          instance.groupsControllerDisconnectVpInfo(id, vpInfoId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerFindAll', function() {
        it('should call groupsControllerFindAll successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerFindAll call and complete the assertions
          /*
          var opts = {};

          instance.groupsControllerFindAll(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupsResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerFindOne', function() {
        it('should call groupsControllerFindOne successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerFindOne call and complete the assertions
          /*

          instance.groupsControllerFindOne(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerRemove', function() {
        it('should call groupsControllerRemove successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerRemove call
          /*

          instance.groupsControllerRemove(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('groupsControllerUpdate', function() {
        it('should call groupsControllerUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for groupsControllerUpdate call and complete the assertions
          /*

          instance.groupsControllerUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.GroupResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
