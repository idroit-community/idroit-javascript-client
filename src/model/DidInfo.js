/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Group from './Group';

/**
 * The DidInfo model module.
 * @module model/DidInfo
 * @version 0.9.2
 */
export default class DidInfo {
  /**
   * Constructs a new <code>DidInfo</code>.
   * @alias module:model/DidInfo
   * @class
   * @param id {String} (必須) DID情報の識別子
   * @param manageUuid {String} (必須) DID情報の管理に用いるユニークな識別子
   * @param did {String} (必須) DID
   * @param method {module:model/DidInfo.MethodEnum} (必須) DIDメソッド
   * @param label {String} (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
   * @param domainName {String} (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないカラムである。
   * @param existPrivateKey {Boolean} (必須) DID情報に紐付いた秘密鍵を本アプリケーションで保管しているか否か
   * @param description {String} (任意) DID情報の生成目的や用途など任意で設定可能な説明文
   * @param createdBy {Object} (任意) DIDを生成したユーザーアカウント
   * @param createdAt {String} (必須) DID情報の作成日時
   * @param updatedAt {String} (必須) DID情報の最終更新
   */
  constructor(id, manageUuid, did, method, label, domainName, existPrivateKey, description, createdBy, createdAt, updatedAt) {
    this.id = id;
    this.manageUuid = manageUuid;
    this.did = did;
    this.method = method;
    this.label = label;
    this.domainName = domainName;
    this.existPrivateKey = existPrivateKey;
    this.description = description;
    this.createdBy = createdBy;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructs a <code>DidInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DidInfo} obj Optional instance to populate.
   * @return {module:model/DidInfo} The populated <code>DidInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DidInfo();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('manageUuid'))
        obj.manageUuid = ApiClient.convertToType(data['manageUuid'], 'String');
      if (data.hasOwnProperty('did'))
        obj.did = ApiClient.convertToType(data['did'], 'String');
      if (data.hasOwnProperty('method'))
        obj.method = ApiClient.convertToType(data['method'], 'String');
      if (data.hasOwnProperty('label'))
        obj.label = ApiClient.convertToType(data['label'], 'String');
      if (data.hasOwnProperty('domainName'))
        obj.domainName = ApiClient.convertToType(data['domainName'], 'String');
      if (data.hasOwnProperty('existPrivateKey'))
        obj.existPrivateKey = ApiClient.convertToType(data['existPrivateKey'], 'Boolean');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], Object);
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], Object);
      if (data.hasOwnProperty('vpInfos'))
        obj.vpInfos = ApiClient.convertToType(data['vpInfos'], Object);
      if (data.hasOwnProperty('groups'))
        obj.groups = ApiClient.convertToType(data['groups'], [Group]);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }
}

/**
 * (必須) DID情報の識別子
 * @member {String} id
 */
DidInfo.prototype.id = undefined;

/**
 * (必須) DID情報の管理に用いるユニークな識別子
 * @member {String} manageUuid
 */
DidInfo.prototype.manageUuid = undefined;

/**
 * (必須) DID
 * @member {String} did
 */
DidInfo.prototype.did = undefined;

/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
DidInfo.MethodEnum = {
  /**
   * value: "key"
   * @const
   */
  key: "key",

  /**
   * value: "web"
   * @const
   */
  web: "web",

  /**
   * value: "ethr"
   * @const
   */
  ethr: "ethr",

  /**
   * value: "ethr:arbitrum:goerli"
   * @const
   */
  ethrarbitrumgoerli: "ethr:arbitrum:goerli",

  /**
   * value: "ethr:sepolia"
   * @const
   */
  ethrsepolia: "ethr:sepolia"
};
/**
 * (必須) DIDメソッド
 * @member {module:model/DidInfo.MethodEnum} method
 */
DidInfo.prototype.method = undefined;

/**
 * (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
 * @member {String} label
 */
DidInfo.prototype.label = undefined;

/**
 * (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないカラムである。
 * @member {String} domainName
 */
DidInfo.prototype.domainName = undefined;

/**
 * (必須) DID情報に紐付いた秘密鍵を本アプリケーションで保管しているか否か
 * @member {Boolean} existPrivateKey
 */
DidInfo.prototype.existPrivateKey = undefined;

/**
 * (任意) DID情報の生成目的や用途など任意で設定可能な説明文
 * @member {String} description
 */
DidInfo.prototype.description = undefined;

/**
 * (任意) DID情報に紐付いたアカウントの配列
 * @member {Object} user
 */
DidInfo.prototype.user = undefined;

/**
 * (任意) DIDを生成したユーザーアカウント
 * @member {Object} createdBy
 */
DidInfo.prototype.createdBy = undefined;

/**
 * (任意) 生成時に署名にDIDを用いたVP情報
 * @member {Object} vpInfos
 */
DidInfo.prototype.vpInfos = undefined;

/**
 * (任意) DID情報に紐づいたグループの配列
 * @member {Array.<module:model/Group>} groups
 */
DidInfo.prototype.groups = undefined;

/**
 * (必須) DID情報の作成日時
 * @member {String} createdAt
 */
DidInfo.prototype.createdAt = undefined;

/**
 * (必須) DID情報の最終更新
 * @member {String} updatedAt
 */
DidInfo.prototype.updatedAt = undefined;

