/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IDroitDashboardAdminApi);
  }
}(this, function(expect, IDroitDashboardAdminApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserResponseDto', function() {
      beforeEach(function() {
        instance = new IDroitDashboardAdminApi.UserResponseDto();
      });

      it('should create an instance of UserResponseDto', function() {
        // TODO: update the code to test UserResponseDto
        expect(instance).to.be.a(IDroitDashboardAdminApi.UserResponseDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property needActivateFlow (base name: "needActivateFlow")', function() {
        // TODO: update the code to test the property needActivateFlow
        expect(instance).to.have.property('needActivateFlow');
        // expect(instance.needActivateFlow).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property role (base name: "role")', function() {
        // TODO: update the code to test the property role
        expect(instance).to.have.property('role');
        // expect(instance.role).to.be(expectedValueLiteral);
      });

      it('should have the property userTokens (base name: "userTokens")', function() {
        // TODO: update the code to test the property userTokens
        expect(instance).to.have.property('userTokens');
        // expect(instance.userTokens).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property didInfos (base name: "didInfos")', function() {
        // TODO: update the code to test the property didInfos
        expect(instance).to.have.property('didInfos');
        // expect(instance.didInfos).to.be(expectedValueLiteral);
      });

      it('should have the property vcInfos (base name: "vcInfos")', function() {
        // TODO: update the code to test the property vcInfos
        expect(instance).to.have.property('vcInfos');
        // expect(instance.vcInfos).to.be(expectedValueLiteral);
      });

      it('should have the property vpInfos (base name: "vpInfos")', function() {
        // TODO: update the code to test the property vpInfos
        expect(instance).to.have.property('vpInfos');
        // expect(instance.vpInfos).to.be(expectedValueLiteral);
      });

      it('should have the property groups (base name: "groups")', function() {
        // TODO: update the code to test the property groups
        expect(instance).to.have.property('groups');
        // expect(instance.groups).to.be(expectedValueLiteral);
      });

      it('should have the property createdUsers (base name: "createdUsers")', function() {
        // TODO: update the code to test the property createdUsers
        expect(instance).to.have.property('createdUsers');
        // expect(instance.createdUsers).to.be(expectedValueLiteral);
      });

      it('should have the property createdVcInfos (base name: "createdVcInfos")', function() {
        // TODO: update the code to test the property createdVcInfos
        expect(instance).to.have.property('createdVcInfos');
        // expect(instance.createdVcInfos).to.be(expectedValueLiteral);
      });

      it('should have the property createdVpInfos (base name: "createdVpInfos")', function() {
        // TODO: update the code to test the property createdVpInfos
        expect(instance).to.have.property('createdVpInfos');
        // expect(instance.createdVpInfos).to.be(expectedValueLiteral);
      });

      it('should have the property createdGroups (base name: "createdGroups")', function() {
        // TODO: update the code to test the property createdGroups
        expect(instance).to.have.property('createdGroups');
        // expect(instance.createdGroups).to.be(expectedValueLiteral);
      });

      it('should have the property createdDidInfos (base name: "createdDidInfos")', function() {
        // TODO: update the code to test the property createdDidInfos
        expect(instance).to.have.property('createdDidInfos');
        // expect(instance.createdDidInfos).to.be(expectedValueLiteral);
      });

      it('should have the property createdVcSchemas (base name: "createdVcSchemas")', function() {
        // TODO: update the code to test the property createdVcSchemas
        expect(instance).to.have.property('createdVcSchemas');
        // expect(instance.createdVcSchemas).to.be(expectedValueLiteral);
      });

      it('should have the property createdVerifications (base name: "createdVerifications")', function() {
        // TODO: update the code to test the property createdVerifications
        expect(instance).to.have.property('createdVerifications');
        // expect(instance.createdVerifications).to.be(expectedValueLiteral);
      });

      it('should have the property createdMails (base name: "createdMails")', function() {
        // TODO: update the code to test the property createdMails
        expect(instance).to.have.property('createdMails');
        // expect(instance.createdMails).to.be(expectedValueLiteral);
      });

      it('should have the property createdFiles (base name: "createdFiles")', function() {
        // TODO: update the code to test the property createdFiles
        expect(instance).to.have.property('createdFiles');
        // expect(instance.createdFiles).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
