/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IDroitDashboardAdminApi);
  }
}(this, function(expect, IDroitDashboardAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IDroitDashboardAdminApi.UsersApi();
  });

  describe('(package)', function() {
    describe('UsersApi', function() {
      describe('usersControllerCreate', function() {
        it('should call usersControllerCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerCreate call and complete the assertions
          /*

          instance.usersControllerCreate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.UserResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerExportKey', function() {
        it('should call usersControllerExportKey successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerExportKey call
          /*

          instance.usersControllerExportKey(id, keyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerFindAll', function() {
        it('should call usersControllerFindAll successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerFindAll call and complete the assertions
          /*
          var opts = {};

          instance.usersControllerFindAll(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.UsersResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerFindOne', function() {
        it('should call usersControllerFindOne successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerFindOne call and complete the assertions
          /*

          instance.usersControllerFindOne(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.UserResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerInvite', function() {
        it('should call usersControllerInvite successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerInvite call
          /*

          instance.usersControllerInvite(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerRegisterUserDid', function() {
        it('should call usersControllerRegisterUserDid successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerRegisterUserDid call
          /*

          instance.usersControllerRegisterUserDid(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerRegistration', function() {
        it('should call usersControllerRegistration successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerRegistration call
          /*

          instance.usersControllerRegistration(body, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerRemove', function() {
        it('should call usersControllerRemove successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerRemove call
          /*

          instance.usersControllerRemove(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerSendDid', function() {
        it('should call usersControllerSendDid successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerSendDid call
          /*

          instance.usersControllerSendDid(id, didInfoId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerSendKey', function() {
        it('should call usersControllerSendKey successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerSendKey call
          /*

          instance.usersControllerSendKey(id, didInfoId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerSendVc', function() {
        it('should call usersControllerSendVc successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerSendVc call
          /*

          instance.usersControllerSendVc(id, vcInfoId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('usersControllerUpdate', function() {
        it('should call usersControllerUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for usersControllerUpdate call and complete the assertions
          /*

          instance.usersControllerUpdate(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.UserResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
