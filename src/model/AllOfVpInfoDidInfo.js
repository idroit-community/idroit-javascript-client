/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import DidInfo from './DidInfo';
import Group from './Group';

/**
 * The AllOfVpInfoDidInfo model module.
 * @module model/AllOfVpInfoDidInfo
 * @version 0.9.2
 */
export default class AllOfVpInfoDidInfo extends DidInfo {
  /**
   * Constructs a new <code>AllOfVpInfoDidInfo</code>.
   * (任意) VP生成時の署名に用いるDID情報の識別子
   * @alias module:model/AllOfVpInfoDidInfo
   * @class
   * @extends module:model/DidInfo
   * @param id {} (必須) DID情報の識別子
   * @param manageUuid {} (必須) DID情報の管理に用いるユニークな識別子
   * @param did {} (必須) DID
   * @param method {} (必須) DIDメソッド
   * @param label {} (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
   * @param domainName {} (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないカラムである。
   * @param existPrivateKey {} (必須) DID情報に紐付いた秘密鍵を本アプリケーションで保管しているか否か
   * @param description {} (任意) DID情報の生成目的や用途など任意で設定可能な説明文
   * @param createdBy {} (任意) DIDを生成したユーザーアカウント
   * @param createdAt {} (必須) DID情報の作成日時
   * @param updatedAt {} (必須) DID情報の最終更新
   */
  constructor(id, manageUuid, did, method, label, domainName, existPrivateKey, description, createdBy, createdAt, updatedAt) {
    super(id, manageUuid, did, method, label, domainName, existPrivateKey, description, createdBy, createdAt, updatedAt);
  }

  /**
   * Constructs a <code>AllOfVpInfoDidInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AllOfVpInfoDidInfo} obj Optional instance to populate.
   * @return {module:model/AllOfVpInfoDidInfo} The populated <code>AllOfVpInfoDidInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AllOfVpInfoDidInfo();
      DidInfo.constructFromObject(data, obj);
    }
    return obj;
  }
}
