/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ConnectDidInfosDto from '../model/ConnectDidInfosDto';
import ConnectUsersDto from '../model/ConnectUsersDto';
import ConnectVcInfosDto from '../model/ConnectVcInfosDto';
import ConnectVcSchemasDto from '../model/ConnectVcSchemasDto';
import ConnectVpInfosDto from '../model/ConnectVpInfosDto';
import CreateGroupDto from '../model/CreateGroupDto';
import GroupResponseDto from '../model/GroupResponseDto';
import GroupsResponseDto from '../model/GroupsResponseDto';

/**
* Groups service.
* @module api/GroupsApi
* @version 0.9.2
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the groupsControllerConnectDidInfos operation.
     * @callback moduleapi/GroupsApi~groupsControllerConnectDidInfosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループへのDID情報紐付け
     * グループにDID情報を紐付けます。
     * @param {module:model/ConnectDidInfosDto} body 
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerConnectDidInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerConnectDidInfos(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsControllerConnectDidInfos");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerConnectDidInfos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/did-infos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerConnectUsers operation.
     * @callback moduleapi/GroupsApi~groupsControllerConnectUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループへのユーザーアカウント紐付け
     * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
     * @param {module:model/ConnectUsersDto} body 
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerConnectUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerConnectUsers(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsControllerConnectUsers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerConnectUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerConnectVcInfos operation.
     * @callback moduleapi/GroupsApi~groupsControllerConnectVcInfosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループへのVC情報紐付け
     * グループにVC情報を紐付けます。
     * @param {module:model/ConnectVcInfosDto} body 
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerConnectVcInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerConnectVcInfos(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsControllerConnectVcInfos");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerConnectVcInfos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/vc-infos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerConnectVcSchema operation.
     * @callback moduleapi/GroupsApi~groupsControllerConnectVcSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループへのVCスキーマ紐付け
     * グループにVCスキーマを紐付けます。
     * @param {module:model/ConnectVcSchemasDto} body 
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerConnectVcSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerConnectVcSchema(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsControllerConnectVcSchema");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerConnectVcSchema");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/vc-schemas', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerConnectVpInfos operation.
     * @callback moduleapi/GroupsApi~groupsControllerConnectVpInfosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループへのVP情報紐付け
     * グループにVP情報を紐付けます。
     * @param {module:model/ConnectVpInfosDto} body 
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerConnectVpInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerConnectVpInfos(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsControllerConnectVpInfos");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerConnectVpInfos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/vp-infos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerCreate operation.
     * @callback moduleapi/GroupsApi~groupsControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループ作成
     * グループ作成に成功しました。
     * @param {module:model/CreateGroupDto} body 
     * @param {module:api/GroupsApi~groupsControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsControllerCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerDisconnectDidInfo operation.
     * @callback moduleapi/GroupsApi~groupsControllerDisconnectDidInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループのDID情報紐付け解除
     * グループに紐付いたDID情報の紐付けを解除します。
     * @param {String} id 
     * @param {String} didInfoId 
     * @param {module:api/GroupsApi~groupsControllerDisconnectDidInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerDisconnectDidInfo(id, didInfoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerDisconnectDidInfo");
      }
      // verify the required parameter 'didInfoId' is set
      if (didInfoId === undefined || didInfoId === null) {
        throw new Error("Missing the required parameter 'didInfoId' when calling groupsControllerDisconnectDidInfo");
      }

      let pathParams = {
        'id': id,'did_info_id': didInfoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/did-info/{did_info_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerDisconnectUser operation.
     * @callback moduleapi/GroupsApi~groupsControllerDisconnectUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループのユーザーアカウント紐付け解除
     * グループに紐付いたユーザーアカウントの紐付けを解除します。
     * @param {String} id 
     * @param {String} userId 
     * @param {module:api/GroupsApi~groupsControllerDisconnectUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerDisconnectUser(id, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerDisconnectUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling groupsControllerDisconnectUser");
      }

      let pathParams = {
        'id': id,'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/user/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerDisconnectVcInfo operation.
     * @callback moduleapi/GroupsApi~groupsControllerDisconnectVcInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループのVC情報紐付け解除
     * グループに紐付いたVC情報の紐付けを解除します。
     * @param {String} id 
     * @param {String} vcInfoId 
     * @param {module:api/GroupsApi~groupsControllerDisconnectVcInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerDisconnectVcInfo(id, vcInfoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerDisconnectVcInfo");
      }
      // verify the required parameter 'vcInfoId' is set
      if (vcInfoId === undefined || vcInfoId === null) {
        throw new Error("Missing the required parameter 'vcInfoId' when calling groupsControllerDisconnectVcInfo");
      }

      let pathParams = {
        'id': id,'vc_info_id': vcInfoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/vc-info/{vc_info_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerDisconnectVcSchema operation.
     * @callback moduleapi/GroupsApi~groupsControllerDisconnectVcSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループのVCスキーマ紐付け解除
     * グループに紐付いたVCスキーマの紐付けを解除します。
     * @param {String} id 
     * @param {String} vcSchemaId 
     * @param {module:api/GroupsApi~groupsControllerDisconnectVcSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerDisconnectVcSchema(id, vcSchemaId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerDisconnectVcSchema");
      }
      // verify the required parameter 'vcSchemaId' is set
      if (vcSchemaId === undefined || vcSchemaId === null) {
        throw new Error("Missing the required parameter 'vcSchemaId' when calling groupsControllerDisconnectVcSchema");
      }

      let pathParams = {
        'id': id,'vc_schema_id': vcSchemaId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/vc-schema/{vc_schema_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerDisconnectVpInfo operation.
     * @callback moduleapi/GroupsApi~groupsControllerDisconnectVpInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループのVP情報紐付け解除
     * グループに紐付いたVP情報の紐付けを解除します。
     * @param {String} id 
     * @param {String} vpInfoId 
     * @param {module:api/GroupsApi~groupsControllerDisconnectVpInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerDisconnectVpInfo(id, vpInfoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerDisconnectVpInfo");
      }
      // verify the required parameter 'vpInfoId' is set
      if (vpInfoId === undefined || vpInfoId === null) {
        throw new Error("Missing the required parameter 'vpInfoId' when calling groupsControllerDisconnectVpInfo");
      }

      let pathParams = {
        'id': id,'vp_info_id': vpInfoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}/vp-info/{vp_info_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerFindAll operation.
     * @callback moduleapi/GroupsApi~groupsControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupsResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループ一覧取得
     * グループを一覧として値を返します。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {Number} opts.limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {String} opts.name (任意)グループの名前。 例: \&quot;Group Project1\&quot;
     * @param {module:model/String} opts.status (任意)グループのステータス。 例: \&quot;active\&quot;
     * @param {module:api/GroupsApi~groupsControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerFindAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit'],'name': opts['name'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupsResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerFindOne operation.
     * @callback moduleapi/GroupsApi~groupsControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループ詳細取得
     * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerFindOne(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerRemove operation.
     * @callback moduleapi/GroupsApi~groupsControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループ停止
     * リクエストパラメータのidで指定された単一のグループを停止します。
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupsControllerRemove(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupsControllerUpdate operation.
     * @callback moduleapi/GroupsApi~groupsControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * グループ更新
     * リクエストパラメータのidで指定された単一のグループ情報を更新します。
     * @param {String} id 
     * @param {module:api/GroupsApi~groupsControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    groupsControllerUpdate(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponseDto;

      return this.apiClient.callApi(
        '/api/v1/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}