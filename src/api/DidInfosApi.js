/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AddLabelToDidInfoDto from '../model/AddLabelToDidInfoDto';
import CreateDidDto from '../model/CreateDidDto';
import DidInfoResponseDto from '../model/DidInfoResponseDto';
import DidInfosResponseDto from '../model/DidInfosResponseDto';
import RegisterDidDto from '../model/RegisterDidDto';
import ResolveDidDto from '../model/ResolveDidDto';
import ResolveDidResponseDto from '../model/ResolveDidResponseDto';

/**
* DidInfos service.
* @module api/DidInfosApi
* @version 0.9.2
*/
export default class DidInfosApi {

    /**
    * Constructs a new DidInfosApi. 
    * @alias module:api/DidInfosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the didInfosControllerAddLabel operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerAddLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DidInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DID情報へのラベル追加
     * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
     * @param {module:model/AddLabelToDidInfoDto} body 
     * @param {String} id 
     * @param {module:api/DidInfosApi~didInfosControllerAddLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    didInfosControllerAddLabel(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling didInfosControllerAddLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didInfosControllerAddLabel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DidInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/did-infos/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerConnectUser operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerConnectUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DidInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DID情報へのクライアントアカウント紐付け
     * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
     * @param {String} id 
     * @param {String} userId 
     * @param {module:api/DidInfosApi~didInfosControllerConnectUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    didInfosControllerConnectUser(id, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didInfosControllerConnectUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling didInfosControllerConnectUser");
      }

      let pathParams = {
        'id': id,'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DidInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/did-infos/{id}/user/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerCreate operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 新規DID生成
     * 新規DIDを生成します。
     * @param {module:model/CreateDidDto} body 
     * @param {module:api/DidInfosApi~didInfosControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    didInfosControllerCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling didInfosControllerCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/did-infos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerDisconnectUser operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerDisconnectUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DID情報のクライアントアカウント紐付け解除
     * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
     * @param {String} id 
     * @param {module:api/DidInfosApi~didInfosControllerDisconnectUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    didInfosControllerDisconnectUser(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didInfosControllerDisconnectUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/did-infos/{id}/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerFindAll operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DidInfosResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DID情報一覧取得
     * アプリケーションが管理するDID情報を一覧として値を返します。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {Number} opts.limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {String} opts.did (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
     * @param {String} opts.manageUuid (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
     * @param {String} opts.label (任意) 例: \&quot;did-for-project1\&quot;
     * @param {module:model/String} opts.method (任意) 例: \&quot;did:key
     * @param {Boolean} opts.existPrivateKey (任意) 例: true
     * @param {String} opts.description (任意) 
     * @param {String} opts.domainName (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
     * @param {module:api/DidInfosApi~didInfosControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    didInfosControllerFindAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit'],'did': opts['did'],'manageUuid': opts['manageUuid'],'label': opts['label'],'method': opts['method'],'existPrivateKey': opts['existPrivateKey'],'description': opts['description'],'domainName': opts['domainName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DidInfosResponseDto;

      return this.apiClient.callApi(
        '/api/v1/did-infos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerFindOne operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DidInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DID情報詳細取得
     * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
     * @param {String} id 
     * @param {module:api/DidInfosApi~didInfosControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    didInfosControllerFindOne(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didInfosControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DidInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/did-infos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerRegister operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerRegisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 既存DID登録
     * 外部で生成されたDIDを本アプリケーションに取り込みます。
     * @param {module:model/RegisterDidDto} body 
     * @param {module:api/DidInfosApi~didInfosControllerRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    didInfosControllerRegister(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling didInfosControllerRegister");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/did-infos/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerRemove operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DID情報削除
     * リクエストパラメータのidで指定された単一のDID情報を削除します。
     * @param {String} id 
     * @param {module:api/DidInfosApi~didInfosControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    didInfosControllerRemove(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didInfosControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/did-infos/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the didInfosControllerResolve operation.
     * @callback moduleapi/DidInfosApi~didInfosControllerResolveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResolveDidResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DID解決
     * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
     * @param {module:model/ResolveDidDto} body 
     * @param {module:api/DidInfosApi~didInfosControllerResolveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    didInfosControllerResolve(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling didInfosControllerResolve");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResolveDidResponseDto;

      return this.apiClient.callApi(
        '/api/v1/did-infos/resolver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}