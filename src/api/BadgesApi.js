/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AddLabelToBadgeDto from '../model/AddLabelToBadgeDto';
import BadgeResponseDto from '../model/BadgeResponseDto';
import BadgesResponseDto from '../model/BadgesResponseDto';
import CreateBadgeDto from '../model/CreateBadgeDto';
import VerifiyBadgeFileReponseDto from '../model/VerifiyBadgeFileReponseDto';
import VerifiyBadgeReponseDto from '../model/VerifiyBadgeReponseDto';
import VerifyBadgeDto from '../model/VerifyBadgeDto';

/**
* Badges service.
* @module api/BadgesApi
* @version 0.9.2
*/
export default class BadgesApi {

    /**
    * Constructs a new BadgesApi. 
    * @alias module:api/BadgesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the badgesControllerAddLabel operation.
     * @callback moduleapi/BadgesApi~badgesControllerAddLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BadgeResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Badgeへのラベル追加
     * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
     * @param {module:model/AddLabelToBadgeDto} body 
     * @param {String} id 
     * @param {module:api/BadgesApi~badgesControllerAddLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    badgesControllerAddLabel(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling badgesControllerAddLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling badgesControllerAddLabel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BadgeResponseDto;

      return this.apiClient.callApi(
        '/api/v1/badges/{id}/label', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the badgesControllerCreate operation.
     * @callback moduleapi/BadgesApi~badgesControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BadgeResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 新規バッジ発行
     * 新規バッジを発行します。
     * @param {module:model/CreateBadgeDto} body 
     * @param {module:api/BadgesApi~badgesControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    badgesControllerCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling badgesControllerCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BadgeResponseDto;

      return this.apiClient.callApi(
        '/api/v1/badges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the badgesControllerDownload operation.
     * @callback moduleapi/BadgesApi~badgesControllerDownloadCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * バッジダウンロード
     * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
     * @param {String} id 
     * @param {String} vpInfoId 
     * @param {module:api/BadgesApi~badgesControllerDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    badgesControllerDownload(id, vpInfoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling badgesControllerDownload");
      }
      // verify the required parameter 'vpInfoId' is set
      if (vpInfoId === undefined || vpInfoId === null) {
        throw new Error("Missing the required parameter 'vpInfoId' when calling badgesControllerDownload");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vpInfoId': vpInfoId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/badges/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the badgesControllerFileVerify operation.
     * @callback moduleapi/BadgesApi~badgesControllerFileVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifiyBadgeFileReponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * バッジファイル検証
     * @param {Blob} file 
     * @param {module:api/BadgesApi~badgesControllerFileVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    badgesControllerFileVerify(file, callback) {
      
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling badgesControllerFileVerify");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VerifiyBadgeFileReponseDto;

      return this.apiClient.callApi(
        '/api/v1/badges/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the badgesControllerFindAll operation.
     * @callback moduleapi/BadgesApi~badgesControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BadgesResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * バッジ一覧取得
     * アプリケーションが管理するバッジ情報を一覧として値を返します。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {Number} opts.limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {String} opts.label (任意) 例: \&quot;sample-badge-1\&quot;
     * @param {String} opts.filename (任意) 例: \&quot;badge-12345-12345.png\&quot;
     * @param {String} opts.description (任意) 
     * @param {Number} opts.status (任意) 例: 1
     * @param {module:api/BadgesApi~badgesControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    badgesControllerFindAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit'],'label': opts['label'],'filename': opts['filename'],'description': opts['description'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BadgesResponseDto;

      return this.apiClient.callApi(
        '/api/v1/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the badgesControllerFindOne operation.
     * @callback moduleapi/BadgesApi~badgesControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BadgeResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * バッジ詳細取得
     * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
     * @param {String} id 
     * @param {module:api/BadgesApi~badgesControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    badgesControllerFindOne(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling badgesControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BadgeResponseDto;

      return this.apiClient.callApi(
        '/api/v1/badges/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the badgesControllerVerify operation.
     * @callback moduleapi/BadgesApi~badgesControllerVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifiyBadgeReponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * バッジ検証
     * バッジのVC/VPの検証を実行します。
     * @param {module:model/VerifyBadgeDto} body 
     * @param {String} id 
     * @param {module:api/BadgesApi~badgesControllerVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    badgesControllerVerify(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling badgesControllerVerify");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling badgesControllerVerify");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifiyBadgeReponseDto;

      return this.apiClient.callApi(
        '/api/v1/badges/{id}/verify', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}