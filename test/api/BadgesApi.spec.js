/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IDroitDashboardAdminApi);
  }
}(this, function(expect, IDroitDashboardAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IDroitDashboardAdminApi.BadgesApi();
  });

  describe('(package)', function() {
    describe('BadgesApi', function() {
      describe('badgesControllerAddLabel', function() {
        it('should call badgesControllerAddLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for badgesControllerAddLabel call and complete the assertions
          /*

          instance.badgesControllerAddLabel(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.BadgeResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('badgesControllerCreate', function() {
        it('should call badgesControllerCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for badgesControllerCreate call and complete the assertions
          /*

          instance.badgesControllerCreate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.BadgeResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('badgesControllerDownload', function() {
        it('should call badgesControllerDownload successfully', function(done) {
          // TODO: uncomment, update parameter values for badgesControllerDownload call and complete the assertions
          /*

          instance.badgesControllerDownload(id, vpInfoId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('badgesControllerFileVerify', function() {
        it('should call badgesControllerFileVerify successfully', function(done) {
          // TODO: uncomment, update parameter values for badgesControllerFileVerify call and complete the assertions
          /*

          instance.badgesControllerFileVerify(file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.VerifiyBadgeFileReponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('badgesControllerFindAll', function() {
        it('should call badgesControllerFindAll successfully', function(done) {
          // TODO: uncomment, update parameter values for badgesControllerFindAll call and complete the assertions
          /*
          var opts = {};

          instance.badgesControllerFindAll(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.BadgesResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('badgesControllerFindOne', function() {
        it('should call badgesControllerFindOne successfully', function(done) {
          // TODO: uncomment, update parameter values for badgesControllerFindOne call and complete the assertions
          /*

          instance.badgesControllerFindOne(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.BadgeResponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('badgesControllerVerify', function() {
        it('should call badgesControllerVerify successfully', function(done) {
          // TODO: uncomment, update parameter values for badgesControllerVerify call and complete the assertions
          /*

          instance.badgesControllerVerify(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IDroitDashboardAdminApi.VerifiyBadgeReponseDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
