/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreateVcSchemaDto from '../model/CreateVcSchemaDto';
import UpdateVcSchemaDto from '../model/UpdateVcSchemaDto';
import VcSchemaResponseDto from '../model/VcSchemaResponseDto';
import VcSchemasResponseDto from '../model/VcSchemasResponseDto';

/**
* VcSchemas service.
* @module api/VcSchemasApi
* @version 0.9.2
*/
export default class VcSchemasApi {

    /**
    * Constructs a new VcSchemasApi. 
    * @alias module:api/VcSchemasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the vcSchemasControllerCreate operation.
     * @callback moduleapi/VcSchemasApi~vcSchemasControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcSchemaResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 新規VCスキーマ作成
     * 新規VCスキーマを作成します。
     * @param {module:model/CreateVcSchemaDto} body 
     * @param {module:api/VcSchemasApi~vcSchemasControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcSchemasControllerCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vcSchemasControllerCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VcSchemaResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-schemas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcSchemasControllerFindAll operation.
     * @callback moduleapi/VcSchemasApi~vcSchemasControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcSchemasResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VCスキーマ一覧取得
     * VCスキーマを一覧として値を返します。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {Number} opts.limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {String} opts.title (任意) 例: \&quot;Schema Sample\&quot;
     * @param {String} opts.version (任意) 例: \&quot;1.0.0\&quot;
     * @param {String} opts.description (任意) 例: 
     * @param {Boolean} opts.isBadgeSchema (任意) 例: true
     * @param {module:api/VcSchemasApi~vcSchemasControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcSchemasControllerFindAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit'],'title': opts['title'],'version': opts['version'],'description': opts['description'],'isBadgeSchema': opts['isBadgeSchema']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VcSchemasResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcSchemasControllerFindOne operation.
     * @callback moduleapi/VcSchemasApi~vcSchemasControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcSchemaResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VCスキーマ情報詳細取得
     * リクエストパラメータのidで指定された単一のVCスキーマの詳細情報の値を返します。
     * @param {String} id 
     * @param {module:api/VcSchemasApi~vcSchemasControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcSchemasControllerFindOne(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vcSchemasControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VcSchemaResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-schemas/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcSchemasControllerUpdate operation.
     * @callback moduleapi/VcSchemasApi~vcSchemasControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcSchemaResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VCスキーマへのグループ紐付け
     * VCスキーマに関連するグループを紐付けます。
     * @param {module:model/UpdateVcSchemaDto} body 
     * @param {String} id 
     * @param {module:api/VcSchemasApi~vcSchemasControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcSchemasControllerUpdate(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vcSchemasControllerUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vcSchemasControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VcSchemaResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-schemas/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}