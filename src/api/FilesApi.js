/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreateDidDto from '../model/CreateDidDto';
import FileResponseDto from '../model/FileResponseDto';
import FilesResponseDto from '../model/FilesResponseDto';

/**
* Files service.
* @module api/FilesApi
* @version 0.9.2
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the filesControllerDownload operation.
     * @callback moduleapi/FilesApi~filesControllerDownloadCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ファイルダウンロード
     * リクエストパラメータのidで指定された単一のファイルのバイナリデータを返します。
     * @param {String} id 
     * @param {module:api/FilesApi~filesControllerDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesControllerDownload(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesControllerDownload");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/files/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesControllerExecuteCSV operation.
     * @callback moduleapi/FilesApi~filesControllerExecuteCSVCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CSVファイル実行
     * (非推奨) ユーザー、クライアント情報を記載したCSVファイルを実行し、新規アカウントを作成します。
     * @param {module:model/CreateDidDto} body 
     * @param {String} id 
     * @param {module:api/FilesApi~filesControllerExecuteCSVCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesControllerExecuteCSV(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesControllerExecuteCSV");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesControllerExecuteCSV");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesControllerFindAll operation.
     * @callback moduleapi/FilesApi~filesControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ファイル一覧取得
     * ファイルを一覧として値を返します。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {Number} opts.limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {String} opts.filename (任意) 例: \&quot;file-1732019975229-394515535.png\&quot;
     * @param {String} opts.originalname (任意) 例: \&quot;english-badge.png\&quot;
     * @param {Boolean} opts.executed (任意) 例: true
     * @param {String} opts.type (任意) 例: \&quot;image/png\&quot;
     * @param {Number} opts.status (任意) 例: 0
     * @param {module:api/FilesApi~filesControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesControllerFindAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit'],'filename': opts['filename'],'originalname': opts['originalname'],'executed': opts['executed'],'type': opts['type'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesResponseDto;

      return this.apiClient.callApi(
        '/api/v1/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesControllerFindOne operation.
     * @callback moduleapi/FilesApi~filesControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ファイル詳細取得
     * リクエストパラメータのidで指定された単一のファイルの詳細情報の値を返します。
     * @param {String} id 
     * @param {module:api/FilesApi~filesControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesControllerFindOne(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileResponseDto;

      return this.apiClient.callApi(
        '/api/v1/files/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesControllerRemove operation.
     * @callback moduleapi/FilesApi~filesControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ファイル削除
     * リクエストパラメータのidで指定された単一のファイルを削除します。
     * @param {String} id 
     * @param {module:api/FilesApi~filesControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesControllerRemove(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesControllerUploadFile operation.
     * @callback moduleapi/FilesApi~filesControllerUploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ファイルアップロード
     * 新規ファイルアップロードを作成します。
     * @param {Blob} file 
     * @param {module:api/FilesApi~filesControllerUploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesControllerUploadFile(file, callback) {
      
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling filesControllerUploadFile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileResponseDto;

      return this.apiClient.callApi(
        '/api/v1/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}