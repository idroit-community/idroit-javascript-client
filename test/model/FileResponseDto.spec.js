/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IDroitDashboardAdminApi);
  }
}(this, function(expect, IDroitDashboardAdminApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FileResponseDto', function() {
      beforeEach(function() {
        instance = new IDroitDashboardAdminApi.FileResponseDto();
      });

      it('should create an instance of FileResponseDto', function() {
        // TODO: update the code to test FileResponseDto
        expect(instance).to.be.a(IDroitDashboardAdminApi.FileResponseDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property filename (base name: "filename")', function() {
        // TODO: update the code to test the property filename
        expect(instance).to.have.property('filename');
        // expect(instance.filename).to.be(expectedValueLiteral);
      });

      it('should have the property originalname (base name: "originalname")', function() {
        // TODO: update the code to test the property originalname
        expect(instance).to.have.property('originalname');
        // expect(instance.originalname).to.be(expectedValueLiteral);
      });

      it('should have the property fileData (base name: "fileData")', function() {
        // TODO: update the code to test the property fileData
        expect(instance).to.have.property('fileData');
        // expect(instance.fileData).to.be(expectedValueLiteral);
      });

      it('should have the property fileType (base name: "fileType")', function() {
        // TODO: update the code to test the property fileType
        expect(instance).to.have.property('fileType');
        // expect(instance.fileType).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property executed (base name: "executed")', function() {
        // TODO: update the code to test the property executed
        expect(instance).to.have.property('executed');
        // expect(instance.executed).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
