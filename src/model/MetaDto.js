/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The MetaDto model module.
 * @module model/MetaDto
 * @version 0.9.2
 */
export default class MetaDto {
  /**
   * Constructs a new <code>MetaDto</code>.
   * @alias module:model/MetaDto
   * @class
   * @param totalItems {Number} Total number of items
   * @param itemCount {Number} Number of items on the current page
   * @param itemsPerPage {Number} Number of items per page
   * @param totalPages {Number} Total number of pages
   * @param currentPage {Number} Current page number
   */
  constructor(totalItems, itemCount, itemsPerPage, totalPages, currentPage) {
    this.totalItems = totalItems;
    this.itemCount = itemCount;
    this.itemsPerPage = itemsPerPage;
    this.totalPages = totalPages;
    this.currentPage = currentPage;
  }

  /**
   * Constructs a <code>MetaDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MetaDto} obj Optional instance to populate.
   * @return {module:model/MetaDto} The populated <code>MetaDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MetaDto();
      if (data.hasOwnProperty('totalItems'))
        obj.totalItems = ApiClient.convertToType(data['totalItems'], 'Number');
      if (data.hasOwnProperty('itemCount'))
        obj.itemCount = ApiClient.convertToType(data['itemCount'], 'Number');
      if (data.hasOwnProperty('itemsPerPage'))
        obj.itemsPerPage = ApiClient.convertToType(data['itemsPerPage'], 'Number');
      if (data.hasOwnProperty('totalPages'))
        obj.totalPages = ApiClient.convertToType(data['totalPages'], 'Number');
      if (data.hasOwnProperty('currentPage'))
        obj.currentPage = ApiClient.convertToType(data['currentPage'], 'Number');
    }
    return obj;
  }
}

/**
 * Total number of items
 * @member {Number} totalItems
 */
MetaDto.prototype.totalItems = undefined;

/**
 * Number of items on the current page
 * @member {Number} itemCount
 */
MetaDto.prototype.itemCount = undefined;

/**
 * Number of items per page
 * @member {Number} itemsPerPage
 */
MetaDto.prototype.itemsPerPage = undefined;

/**
 * Total number of pages
 * @member {Number} totalPages
 */
MetaDto.prototype.totalPages = undefined;

/**
 * Current page number
 * @member {Number} currentPage
 */
MetaDto.prototype.currentPage = undefined;

