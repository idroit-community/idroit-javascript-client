/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IDroitDashboardAdminApi);
  }
}(this, function(expect, IDroitDashboardAdminApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ResolveDidResponseDto', function() {
      beforeEach(function() {
        instance = new IDroitDashboardAdminApi.ResolveDidResponseDto();
      });

      it('should create an instance of ResolveDidResponseDto', function() {
        // TODO: update the code to test ResolveDidResponseDto
        expect(instance).to.be.a(IDroitDashboardAdminApi.ResolveDidResponseDto);
      });

      it('should have the property context (base name: "context")', function() {
        // TODO: update the code to test the property context
        expect(instance).to.have.property('context');
        // expect(instance.context).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property verificationMethod (base name: "verificationMethod")', function() {
        // TODO: update the code to test the property verificationMethod
        expect(instance).to.have.property('verificationMethod');
        // expect(instance.verificationMethod).to.be(expectedValueLiteral);
      });

      it('should have the property assertionMethod (base name: "assertionMethod")', function() {
        // TODO: update the code to test the property assertionMethod
        expect(instance).to.have.property('assertionMethod');
        // expect(instance.assertionMethod).to.be(expectedValueLiteral);
      });

      it('should have the property authentication (base name: "authentication")', function() {
        // TODO: update the code to test the property authentication
        expect(instance).to.have.property('authentication');
        // expect(instance.authentication).to.be(expectedValueLiteral);
      });

      it('should have the property capabilityInvocation (base name: "capabilityInvocation")', function() {
        // TODO: update the code to test the property capabilityInvocation
        expect(instance).to.have.property('capabilityInvocation');
        // expect(instance.capabilityInvocation).to.be(expectedValueLiteral);
      });

      it('should have the property capabilityDelegation (base name: "capabilityDelegation")', function() {
        // TODO: update the code to test the property capabilityDelegation
        expect(instance).to.have.property('capabilityDelegation');
        // expect(instance.capabilityDelegation).to.be(expectedValueLiteral);
      });

      it('should have the property keyAgreement (base name: "keyAgreement")', function() {
        // TODO: update the code to test the property keyAgreement
        expect(instance).to.have.property('keyAgreement');
        // expect(instance.keyAgreement).to.be(expectedValueLiteral);
      });

    });
  });

}));
