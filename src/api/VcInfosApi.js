/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AddLabelToVcInfoDto from '../model/AddLabelToVcInfoDto';
import CreateVcInfoDto from '../model/CreateVcInfoDto';
import GenerateVpDto from '../model/GenerateVpDto';
import IssueVcInfoDto from '../model/IssueVcInfoDto';
import UpdateVcInfoDto from '../model/UpdateVcInfoDto';
import VcInfoResponseDto from '../model/VcInfoResponseDto';
import VcInfosResponseDto from '../model/VcInfosResponseDto';

/**
* VcInfos service.
* @module api/VcInfosApi
* @version 0.9.2
*/
export default class VcInfosApi {

    /**
    * Constructs a new VcInfosApi. 
    * @alias module:api/VcInfosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the vcInfosControllerAddLabel operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerAddLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VC情報へのラベル追加
     * リクエストパラメータのidで指定された単一のVC情報に対して、任意の管理用ラベルを追加します。
     * @param {module:model/AddLabelToVcInfoDto} body 
     * @param {String} id 
     * @param {module:api/VcInfosApi~vcInfosControllerAddLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcInfosControllerAddLabel(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vcInfosControllerAddLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vcInfosControllerAddLabel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VcInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-infos/{id}/label', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerConnectUser operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerConnectUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VC情報へのクライアントアカウント紐付け
     * VC情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
     * @param {module:model/UpdateVcInfoDto} body 
     * @param {String} id 
     * @param {module:api/VcInfosApi~vcInfosControllerConnectUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vcInfosControllerConnectUser(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vcInfosControllerConnectUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vcInfosControllerConnectUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/vc-infos/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerCreate operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 新規VC発行
     * 新規VCを発行します。
     * @param {module:model/CreateVcInfoDto} body 
     * @param {module:api/VcInfosApi~vcInfosControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcInfosControllerCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vcInfosControllerCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VcInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-infos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerDisconnectUser operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerDisconnectUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VC情報のクライアントアカウント紐付け解除
     * VC情報に紐付いたクライアントアカウントの紐付けを解除します。
     * @param {String} id 
     * @param {module:api/VcInfosApi~vcInfosControllerDisconnectUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vcInfosControllerDisconnectUser(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vcInfosControllerDisconnectUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/vc-infos/{id}/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerFindAll operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcInfosResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VC情報一覧取得
     * アプリケーションが管理するVC情報を一覧として値を返します。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {Number} opts.limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {String} opts.label (任意) 例: \&quot;vc-for-project1\&quot;
     * @param {String} opts.description (任意) 
     * @param {module:api/VcInfosApi~vcInfosControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcInfosControllerFindAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit'],'label': opts['label'],'description': opts['description']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VcInfosResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-infos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerFindOne operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VC情報詳細取得
     * リクエストパラメータのidで指定された単一のVC情報の詳細情報の値を返します。
     * @param {String} id 
     * @param {module:api/VcInfosApi~vcInfosControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcInfosControllerFindOne(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vcInfosControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VcInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-infos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerGenerateVp operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerGenerateVpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 新規VP情報生成
     * リクエストパラメータのidで指定されたVC情報から新規VPを発行します。
     * @param {module:model/GenerateVpDto} body 
     * @param {String} id 
     * @param {module:api/VcInfosApi~vcInfosControllerGenerateVpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcInfosControllerGenerateVp(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vcInfosControllerGenerateVp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vcInfosControllerGenerateVp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VcInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-infos/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerIssue operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 新規VC発行(スキーマなし)
     * VCスキーマを指定せず直接新規VCを発行します。
     * @param {module:model/IssueVcInfoDto} body 
     * @param {module:api/VcInfosApi~vcInfosControllerIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcInfosControllerIssue(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vcInfosControllerIssue");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VcInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-infos/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the vcInfosControllerUpload operation.
     * @callback moduleapi/VcInfosApi~vcInfosControllerUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcInfoResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 新規VCアップロード
     * 外部で発行された既存VCをアップロードし、本アプリケーションに保存します。。
     * @param {Object} credentialObject 
     * @param {String} label 
     * @param {String} description 
     * @param {module:api/VcInfosApi~vcInfosControllerUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    vcInfosControllerUpload(credentialObject, label, description, callback) {
      
      let postBody = null;
      // verify the required parameter 'credentialObject' is set
      if (credentialObject === undefined || credentialObject === null) {
        throw new Error("Missing the required parameter 'credentialObject' when calling vcInfosControllerUpload");
      }
      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling vcInfosControllerUpload");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling vcInfosControllerUpload");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'credentialObject': credentialObject,'label': label,'description': description
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VcInfoResponseDto;

      return this.apiClient.callApi(
        '/api/v1/vc-infos/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}