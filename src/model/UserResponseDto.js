/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import DidInfo from './DidInfo';
import Group from './Group';
import Mail from './Mail';
import User from './User';
import UserToken from './UserToken';
import VcInfo from './VcInfo';
import VcSchema from './VcSchema';
import Verification from './Verification';
import VpInfo from './VpInfo';

/**
 * The UserResponseDto model module.
 * @module model/UserResponseDto
 * @version 0.9.2
 */
export default class UserResponseDto {
  /**
   * Constructs a new <code>UserResponseDto</code>.
   * @alias module:model/UserResponseDto
   * @class
   * @param id {String} ユーザーアカウントの識別子
   * @param name {String} ユーザーアカウントの名前
   * @param email {String} ユーザーアカウントのメールアドレス
   * @param needActivateFlow {Boolean} ユーザーアクティベーション(true: アクティブ /false: 停止中)
   * @param status {module:model/UserResponseDto.StatusEnum} ユーザーのアカウントステータス(\"inactive\": アクティブ未完了, \"acrivating\": アクティブ作業途中, \"active\": アクティブ中, \"deactive\": 論理削除済)
   * @param role {module:model/UserResponseDto.RoleEnum} ユーザーのアカウントロール(\"admin\", \"user\", \"client\")
   * @param userTokens {Array.<module:model/UserToken>} (任意) ユーザーアカウントがアップロードしたファイルの配列。
   * @param createdBy {Object} ユーザーアカウントを作成したユーザーアカウント
   * @param createdAt {String} ユーザーアカウントの作成日時
   * @param updatedAt {String} ユーザーアカウントの更新日時
   */
  constructor(id, name, email, needActivateFlow, status, role, userTokens, createdBy, createdAt, updatedAt) {
    this.id = id;
    this.name = name;
    this.email = email;
    this.needActivateFlow = needActivateFlow;
    this.status = status;
    this.role = role;
    this.userTokens = userTokens;
    this.createdBy = createdBy;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructs a <code>UserResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserResponseDto} obj Optional instance to populate.
   * @return {module:model/UserResponseDto} The populated <code>UserResponseDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UserResponseDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (data.hasOwnProperty('needActivateFlow'))
        obj.needActivateFlow = ApiClient.convertToType(data['needActivateFlow'], 'Boolean');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('role'))
        obj.role = ApiClient.convertToType(data['role'], 'String');
      if (data.hasOwnProperty('userTokens'))
        obj.userTokens = ApiClient.convertToType(data['userTokens'], [UserToken]);
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], Object);
      if (data.hasOwnProperty('didInfos'))
        obj.didInfos = ApiClient.convertToType(data['didInfos'], [DidInfo]);
      if (data.hasOwnProperty('vcInfos'))
        obj.vcInfos = ApiClient.convertToType(data['vcInfos'], [VcInfo]);
      if (data.hasOwnProperty('vpInfos'))
        obj.vpInfos = ApiClient.convertToType(data['vpInfos'], [VpInfo]);
      if (data.hasOwnProperty('groups'))
        obj.groups = ApiClient.convertToType(data['groups'], [Group]);
      if (data.hasOwnProperty('createdUsers'))
        obj.createdUsers = ApiClient.convertToType(data['createdUsers'], [User]);
      if (data.hasOwnProperty('createdVcInfos'))
        obj.createdVcInfos = ApiClient.convertToType(data['createdVcInfos'], [VcInfo]);
      if (data.hasOwnProperty('createdVpInfos'))
        obj.createdVpInfos = ApiClient.convertToType(data['createdVpInfos'], [VpInfo]);
      if (data.hasOwnProperty('createdGroups'))
        obj.createdGroups = ApiClient.convertToType(data['createdGroups'], [Group]);
      if (data.hasOwnProperty('createdDidInfos'))
        obj.createdDidInfos = ApiClient.convertToType(data['createdDidInfos'], [DidInfo]);
      if (data.hasOwnProperty('createdVcSchemas'))
        obj.createdVcSchemas = ApiClient.convertToType(data['createdVcSchemas'], [VcSchema]);
      if (data.hasOwnProperty('createdVerifications'))
        obj.createdVerifications = ApiClient.convertToType(data['createdVerifications'], [Verification]);
      if (data.hasOwnProperty('createdMails'))
        obj.createdMails = ApiClient.convertToType(data['createdMails'], [Mail]);
      if (data.hasOwnProperty('createdFiles'))
        obj.createdFiles = ApiClient.convertToType(data['createdFiles'], [File]);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }
}

/**
 * ユーザーアカウントの識別子
 * @member {String} id
 */
UserResponseDto.prototype.id = undefined;

/**
 * ユーザーアカウントの名前
 * @member {String} name
 */
UserResponseDto.prototype.name = undefined;

/**
 * ユーザーアカウントのメールアドレス
 * @member {String} email
 */
UserResponseDto.prototype.email = undefined;

/**
 * ユーザーアクティベーション(true: アクティブ /false: 停止中)
 * @member {Boolean} needActivateFlow
 */
UserResponseDto.prototype.needActivateFlow = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UserResponseDto.StatusEnum = {
  /**
   * value: "inactive"
   * @const
   */
  inactive: "inactive",

  /**
   * value: "activating"
   * @const
   */
  activating: "activating",

  /**
   * value: "active"
   * @const
   */
  active: "active",

  /**
   * value: "deactive"
   * @const
   */
  deactive: "deactive"
};
/**
 * ユーザーのアカウントステータス(\"inactive\": アクティブ未完了, \"acrivating\": アクティブ作業途中, \"active\": アクティブ中, \"deactive\": 論理削除済)
 * @member {module:model/UserResponseDto.StatusEnum} status
 */
UserResponseDto.prototype.status = undefined;

/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
UserResponseDto.RoleEnum = {
  /**
   * value: "admin"
   * @const
   */
  admin: "admin",

  /**
   * value: "user"
   * @const
   */
  user: "user",

  /**
   * value: "client"
   * @const
   */
  client: "client"
};
/**
 * ユーザーのアカウントロール(\"admin\", \"user\", \"client\")
 * @member {module:model/UserResponseDto.RoleEnum} role
 */
UserResponseDto.prototype.role = undefined;

/**
 * (任意) ユーザーアカウントがアップロードしたファイルの配列。
 * @member {Array.<module:model/UserToken>} userTokens
 */
UserResponseDto.prototype.userTokens = undefined;

/**
 * ユーザーアカウントを作成したユーザーアカウント
 * @member {Object} createdBy
 */
UserResponseDto.prototype.createdBy = undefined;

/**
 * ユーザーアカウントに紐付けられたDID情報の配列
 * @member {Array.<module:model/DidInfo>} didInfos
 */
UserResponseDto.prototype.didInfos = undefined;

/**
 * ユーザーアカウントに紐付けられたVC情報の配列
 * @member {Array.<module:model/VcInfo>} vcInfos
 */
UserResponseDto.prototype.vcInfos = undefined;

/**
 * ユーザーアカウントに紐付けられたVP情報の配列
 * @member {Array.<module:model/VpInfo>} vpInfos
 */
UserResponseDto.prototype.vpInfos = undefined;

/**
 * ユーザーアカウントが作成したグループの配列
 * @member {Array.<module:model/Group>} groups
 */
UserResponseDto.prototype.groups = undefined;

/**
 * ユーザーアカウントに紐付けされたVP情報の配列
 * @member {Array.<module:model/User>} createdUsers
 */
UserResponseDto.prototype.createdUsers = undefined;

/**
 * ユーザーが作成したVC情報の配列
 * @member {Array.<module:model/VcInfo>} createdVcInfos
 */
UserResponseDto.prototype.createdVcInfos = undefined;

/**
 * ユーザーが作成したVP情報の配列
 * @member {Array.<module:model/VpInfo>} createdVpInfos
 */
UserResponseDto.prototype.createdVpInfos = undefined;

/**
 * ユーザーアカウントが作成したグループの配列
 * @member {Array.<module:model/Group>} createdGroups
 */
UserResponseDto.prototype.createdGroups = undefined;

/**
 * ユーザーが作成したDID情報の配列
 * @member {Array.<module:model/DidInfo>} createdDidInfos
 */
UserResponseDto.prototype.createdDidInfos = undefined;

/**
 * ユーザーが作成したVCスキーマの配列
 * @member {Array.<module:model/VcSchema>} createdVcSchemas
 */
UserResponseDto.prototype.createdVcSchemas = undefined;

/**
 * ユーザーアカウントが実行した検証結果の配列
 * @member {Array.<module:model/Verification>} createdVerifications
 */
UserResponseDto.prototype.createdVerifications = undefined;

/**
 * Admin権限アカウントが送信したメールの配列
 * @member {Array.<module:model/Mail>} createdMails
 */
UserResponseDto.prototype.createdMails = undefined;

/**
 * ユーザーアカウントに紐付けされたファイルの配列
 * @member {Array.<File>} createdFiles
 */
UserResponseDto.prototype.createdFiles = undefined;

/**
 * ユーザーアカウントの作成日時
 * @member {String} createdAt
 */
UserResponseDto.prototype.createdAt = undefined;

/**
 * ユーザーアカウントの更新日時
 * @member {String} updatedAt
 */
UserResponseDto.prototype.updatedAt = undefined;

