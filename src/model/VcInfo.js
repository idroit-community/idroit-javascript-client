/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Group from './Group';
import Verification from './Verification';
import VpInfo from './VpInfo';

/**
 * The VcInfo model module.
 * @module model/VcInfo
 * @version 0.9.2
 */
export default class VcInfo {
  /**
   * Constructs a new <code>VcInfo</code>.
   * @alias module:model/VcInfo
   * @class
   * @param id {String} (必須) VC情報の識別子
   * @param label {String} (任意) VCの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
   * @param hash {String} (必須) VCのハッシュ値。VCの保管における識別子として用いる。
   * @param description {String} (任意) VCの発行目的や用途など任意で設定可能な説明文。
   * @param createdBy {Object} (任意) VC情報を生成したユーザーアカウント
   * @param createdAt {String} (必須) VC情報の作成日時
   * @param updatedAt {String} (必須) VC情報の更新日時
   */
  constructor(id, label, hash, description, createdBy, createdAt, updatedAt) {
    this.id = id;
    this.label = label;
    this.hash = hash;
    this.description = description;
    this.createdBy = createdBy;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructs a <code>VcInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VcInfo} obj Optional instance to populate.
   * @return {module:model/VcInfo} The populated <code>VcInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new VcInfo();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('label'))
        obj.label = ApiClient.convertToType(data['label'], 'String');
      if (data.hasOwnProperty('hash'))
        obj.hash = ApiClient.convertToType(data['hash'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], Object);
      if (data.hasOwnProperty('vcSchema'))
        obj.vcSchema = ApiClient.convertToType(data['vcSchema'], Object);
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], Object);
      if (data.hasOwnProperty('vpInfos'))
        obj.vpInfos = ApiClient.convertToType(data['vpInfos'], [VpInfo]);
      if (data.hasOwnProperty('groups'))
        obj.groups = ApiClient.convertToType(data['groups'], [Group]);
      if (data.hasOwnProperty('badge'))
        obj.badge = ApiClient.convertToType(data['badge'], Object);
      if (data.hasOwnProperty('verifications'))
        obj.verifications = ApiClient.convertToType(data['verifications'], [Verification]);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }
}

/**
 * (必須) VC情報の識別子
 * @member {String} id
 */
VcInfo.prototype.id = undefined;

/**
 * (任意) VCの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
 * @member {String} label
 */
VcInfo.prototype.label = undefined;

/**
 * (必須) VCのハッシュ値。VCの保管における識別子として用いる。
 * @member {String} hash
 */
VcInfo.prototype.hash = undefined;

/**
 * (任意) VCの発行目的や用途など任意で設定可能な説明文。
 * @member {String} description
 */
VcInfo.prototype.description = undefined;

/**
 * (任意) VC情報を生成したユーザーアカウント
 * @member {Object} createdBy
 */
VcInfo.prototype.createdBy = undefined;

/**
 * (任意) 発行したVCの元となるVCスキーマ
 * @member {Object} vcSchema
 */
VcInfo.prototype.vcSchema = undefined;

/**
 * (任意) VC情報と紐付いたアカウント
 * @member {Object} user
 */
VcInfo.prototype.user = undefined;

/**
 * (任意) このVCを元に生成したVP情報の配列
 * @member {Array.<module:model/VpInfo>} vpInfos
 */
VcInfo.prototype.vpInfos = undefined;

/**
 * (任意) VC情報に紐づいたグループの配列
 * @member {Array.<module:model/Group>} groups
 */
VcInfo.prototype.groups = undefined;

/**
 * (任意) VC情報と紐付いたバッジ
 * @member {Object} badge
 */
VcInfo.prototype.badge = undefined;

/**
 * (任意) このVCの検証結果の配列。
 * @member {Array.<module:model/Verification>} verifications
 */
VcInfo.prototype.verifications = undefined;

/**
 * (必須) VC情報の作成日時
 * @member {String} createdAt
 */
VcInfo.prototype.createdAt = undefined;

/**
 * (必須) VC情報の更新日時
 * @member {String} updatedAt
 */
VcInfo.prototype.updatedAt = undefined;

