/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Group from './Group';
import User from './User';

/**
 * The Mail model module.
 * @module model/Mail
 * @version 0.9.2
 */
export default class Mail {
  /**
   * Constructs a new <code>Mail</code>.
   * @alias module:model/Mail
   * @class
   * @param id {String} (必須) 送信済みメールの識別子
   * @param title {String} (必須) 送信済みメールの件名
   * @param content {String} (必須) 送信済みメールの内容
   * @param forEveryUser {Boolean} (必須) 全てのuser権限アカウントに対して送信するか。(true: 全てのuser権限アカウントに送信, false: 全てのuser権限アカウントに送信しない)
   * @param forEveryClient {Boolean} (必須) 全てのclient権限アカウントに対して送信するか。(true: 全てのclient権限アカウントに送信, false: 全てのclient権限アカウントに送信しない)
   * @param createdAt {String} (必須) メールの送信日時
   * @param updatedAt {String} (必須) メールの送信日時
   */
  constructor(id, title, content, forEveryUser, forEveryClient, createdAt, updatedAt) {
    this.id = id;
    this.title = title;
    this.content = content;
    this.forEveryUser = forEveryUser;
    this.forEveryClient = forEveryClient;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructs a <code>Mail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Mail} obj Optional instance to populate.
   * @return {module:model/Mail} The populated <code>Mail</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Mail();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('content'))
        obj.content = ApiClient.convertToType(data['content'], 'String');
      if (data.hasOwnProperty('forEveryUser'))
        obj.forEveryUser = ApiClient.convertToType(data['forEveryUser'], 'Boolean');
      if (data.hasOwnProperty('forEveryClient'))
        obj.forEveryClient = ApiClient.convertToType(data['forEveryClient'], 'Boolean');
      if (data.hasOwnProperty('users'))
        obj.users = ApiClient.convertToType(data['users'], [User]);
      if (data.hasOwnProperty('groups'))
        obj.groups = ApiClient.convertToType(data['groups'], [Group]);
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], [User]);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }
}

/**
 * (必須) 送信済みメールの識別子
 * @member {String} id
 */
Mail.prototype.id = undefined;

/**
 * (必須) 送信済みメールの件名
 * @member {String} title
 */
Mail.prototype.title = undefined;

/**
 * (必須) 送信済みメールの内容
 * @member {String} content
 */
Mail.prototype.content = undefined;

/**
 * (必須) 全てのuser権限アカウントに対して送信するか。(true: 全てのuser権限アカウントに送信, false: 全てのuser権限アカウントに送信しない)
 * @member {Boolean} forEveryUser
 */
Mail.prototype.forEveryUser = undefined;

/**
 * (必須) 全てのclient権限アカウントに対して送信するか。(true: 全てのclient権限アカウントに送信, false: 全てのclient権限アカウントに送信しない)
 * @member {Boolean} forEveryClient
 */
Mail.prototype.forEveryClient = undefined;

/**
 * (任意) メールの送信先となるユーザーアカウントの配列
 * @member {Array.<module:model/User>} users
 */
Mail.prototype.users = undefined;

/**
 * (任意) メールの送信先となるグループの配列
 * @member {Array.<module:model/Group>} groups
 */
Mail.prototype.groups = undefined;

/**
 * (必須) メール送信操作を行ったAdmin権限アカウント
 * @member {Array.<module:model/User>} createdBy
 */
Mail.prototype.createdBy = undefined;

/**
 * (必須) メールの送信日時
 * @member {String} createdAt
 */
Mail.prototype.createdAt = undefined;

/**
 * (必須) メールの送信日時
 * @member {String} updatedAt
 */
Mail.prototype.updatedAt = undefined;

