/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import DidInfo from './DidInfo';
import User from './User';
import VcInfo from './VcInfo';
import VcSchema from './VcSchema';
import VpInfo from './VpInfo';

/**
 * The GroupResponseDto model module.
 * @module model/GroupResponseDto
 * @version 0.9.2
 */
export default class GroupResponseDto {
  /**
   * Constructs a new <code>GroupResponseDto</code>.
   * @alias module:model/GroupResponseDto
   * @class
   * @param id {String} グループの識別子
   * @param name {String}  グループの名前
   * @param status {module:model/GroupResponseDto.StatusEnum} グループの状態(1: アクティブ, 0: 停止中)
   * @param description {String} グループの作成目的や用途など任意で設定可能な説明文
   * @param users {Array.<module:model/User>} グループに紐付いたユーザーアカウントの配列
   * @param createdBy {Object} グループを作成したユーザーアカウント
   * @param didInfos {Array.<module:model/DidInfo>} グループに紐付いたVC情報の配列
   * @param vcInfos {Array.<module:model/VcInfo>} グループに紐付いたVC情報の配列
   * @param vpInfos {Array.<module:model/VpInfo>} グループに紐付いたVP情報の配列
   * @param vcSchemas {Array.<module:model/VcSchema>} グループに紐付いたVCスキーマの配列
   * @param createdAt {String} グループの作成日時
   * @param updatedAt {String} グループの最終更新日時
   */
  constructor(id, name, status, description, users, createdBy, didInfos, vcInfos, vpInfos, vcSchemas, createdAt, updatedAt) {
    this.id = id;
    this.name = name;
    this.status = status;
    this.description = description;
    this.users = users;
    this.createdBy = createdBy;
    this.didInfos = didInfos;
    this.vcInfos = vcInfos;
    this.vpInfos = vpInfos;
    this.vcSchemas = vcSchemas;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructs a <code>GroupResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GroupResponseDto} obj Optional instance to populate.
   * @return {module:model/GroupResponseDto} The populated <code>GroupResponseDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GroupResponseDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('users'))
        obj.users = ApiClient.convertToType(data['users'], [User]);
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], Object);
      if (data.hasOwnProperty('didInfos'))
        obj.didInfos = ApiClient.convertToType(data['didInfos'], [DidInfo]);
      if (data.hasOwnProperty('vcInfos'))
        obj.vcInfos = ApiClient.convertToType(data['vcInfos'], [VcInfo]);
      if (data.hasOwnProperty('vpInfos'))
        obj.vpInfos = ApiClient.convertToType(data['vpInfos'], [VpInfo]);
      if (data.hasOwnProperty('vcSchemas'))
        obj.vcSchemas = ApiClient.convertToType(data['vcSchemas'], [VcSchema]);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }
}

/**
 * グループの識別子
 * @member {String} id
 */
GroupResponseDto.prototype.id = undefined;

/**
 *  グループの名前
 * @member {String} name
 */
GroupResponseDto.prototype.name = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
GroupResponseDto.StatusEnum = {
  /**
   * value: "active"
   * @const
   */
  active: "active",

  /**
   * value: "deactive"
   * @const
   */
  deactive: "deactive"
};
/**
 * グループの状態(1: アクティブ, 0: 停止中)
 * @member {module:model/GroupResponseDto.StatusEnum} status
 */
GroupResponseDto.prototype.status = undefined;

/**
 * グループの作成目的や用途など任意で設定可能な説明文
 * @member {String} description
 */
GroupResponseDto.prototype.description = undefined;

/**
 * グループに紐付いたユーザーアカウントの配列
 * @member {Array.<module:model/User>} users
 */
GroupResponseDto.prototype.users = undefined;

/**
 * グループを作成したユーザーアカウント
 * @member {Object} createdBy
 */
GroupResponseDto.prototype.createdBy = undefined;

/**
 * グループに紐付いたVC情報の配列
 * @member {Array.<module:model/DidInfo>} didInfos
 */
GroupResponseDto.prototype.didInfos = undefined;

/**
 * グループに紐付いたVC情報の配列
 * @member {Array.<module:model/VcInfo>} vcInfos
 */
GroupResponseDto.prototype.vcInfos = undefined;

/**
 * グループに紐付いたVP情報の配列
 * @member {Array.<module:model/VpInfo>} vpInfos
 */
GroupResponseDto.prototype.vpInfos = undefined;

/**
 * グループに紐付いたVCスキーマの配列
 * @member {Array.<module:model/VcSchema>} vcSchemas
 */
GroupResponseDto.prototype.vcSchemas = undefined;

/**
 * グループの作成日時
 * @member {String} createdAt
 */
GroupResponseDto.prototype.createdAt = undefined;

/**
 * グループの最終更新日時
 * @member {String} updatedAt
 */
GroupResponseDto.prototype.updatedAt = undefined;

