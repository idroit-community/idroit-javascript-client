/*
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The VcSchemaProperty model module.
 * @module model/VcSchemaProperty
 * @version 0.9.2
 */
export default class VcSchemaProperty {
  /**
   * Constructs a new <code>VcSchemaProperty</code>.
   * @alias module:model/VcSchemaProperty
   * @class
   * @param id {String} The ID of the vcSchema
   * @param propIndex {Number} property Index number
   * @param propName {String} property Name of credentialSubject
   * @param propType {String} property Type of credentialSubject
   * @param parentObjectIndex {Number} parent property
   * @param createdAt {String} The date the user was created
   * @param updatedAt {String} The date the user was last updated
   */
  constructor(id, propIndex, propName, propType, parentObjectIndex, createdAt, updatedAt) {
    this.id = id;
    this.propIndex = propIndex;
    this.propName = propName;
    this.propType = propType;
    this.parentObjectIndex = parentObjectIndex;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructs a <code>VcSchemaProperty</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VcSchemaProperty} obj Optional instance to populate.
   * @return {module:model/VcSchemaProperty} The populated <code>VcSchemaProperty</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new VcSchemaProperty();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('propIndex'))
        obj.propIndex = ApiClient.convertToType(data['propIndex'], 'Number');
      if (data.hasOwnProperty('propName'))
        obj.propName = ApiClient.convertToType(data['propName'], 'String');
      if (data.hasOwnProperty('propType'))
        obj.propType = ApiClient.convertToType(data['propType'], 'String');
      if (data.hasOwnProperty('parentObjectIndex'))
        obj.parentObjectIndex = ApiClient.convertToType(data['parentObjectIndex'], 'Number');
      if (data.hasOwnProperty('vcSchema'))
        obj.vcSchema = ApiClient.convertToType(data['vcSchema'], Object);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }
}

/**
 * The ID of the vcSchema
 * @member {String} id
 */
VcSchemaProperty.prototype.id = undefined;

/**
 * property Index number
 * @member {Number} propIndex
 */
VcSchemaProperty.prototype.propIndex = undefined;

/**
 * property Name of credentialSubject
 * @member {String} propName
 */
VcSchemaProperty.prototype.propName = undefined;

/**
 * property Type of credentialSubject
 * @member {String} propType
 */
VcSchemaProperty.prototype.propType = undefined;

/**
 * parent property
 * @member {Number} parentObjectIndex
 */
VcSchemaProperty.prototype.parentObjectIndex = undefined;

/**
 * The VcSchema is origin
 * @member {Object} vcSchema
 */
VcSchemaProperty.prototype.vcSchema = undefined;

/**
 * The date the user was created
 * @member {String} createdAt
 */
VcSchemaProperty.prototype.createdAt = undefined;

/**
 * The date the user was last updated
 * @member {String} updatedAt
 */
VcSchemaProperty.prototype.updatedAt = undefined;

